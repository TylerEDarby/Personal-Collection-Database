
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [MovieLibrary] ON

MERGE INTO [MovieLibrary] AS [Target]
USING (VALUES
  (1,1)
) AS [Source] ([Id],[UserId])
ON ([Target].[Id] = [Source].[Id])
WHEN MATCHED AND (
	NULLIF([Source].[UserId], [Target].[UserId]) IS NOT NULL OR NULLIF([Target].[UserId], [Source].[UserId]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[UserId] = [Source].[UserId]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[UserId])
 VALUES([Source].[Id],[Source].[UserId])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [MovieLibrary]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[MovieLibrary] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO



SET IDENTITY_INSERT [MovieLibrary] OFF
SET NOCOUNT OFF
GO



--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [MovieRecord] ON

MERGE INTO [MovieRecord] AS [Target]
USING (VALUES
  (1,N'Nightmare Before Christmas',N'AVI',1,1)
 ,(3,N'Trolls',N'FLV',3,1)
 ,(4,N'Trolls 2',N'MOV',9,1)
 ,(5,N'Frozen',N'MP',2,1)
 ,(6,N'Lilo & Stitch',N'WMV',626,1)
 ,(7,N'The Peanut Butter Falcon',N'MP4',14,1)
 ,(8,N'Tarzan',N'WebM',10,1)
 ,(9,N'The Wolf of Wall Street',N'AVCHD',24,1)
 ,(11,N'Contact',N'UFO',51,1)
 ,(12,N'Enter the Void',N'AVI',3,1)
 ,(13,N'Brave Little Toaster',N'FLV',5,1)
) AS [Source] ([Id],[Title],[Format],[Quantity],[LibraryId])
ON ([Target].[Id] = [Source].[Id])
WHEN MATCHED AND (
	NULLIF([Source].[Title], [Target].[Title]) IS NOT NULL OR NULLIF([Target].[Title], [Source].[Title]) IS NOT NULL OR 
	NULLIF([Source].[Format], [Target].[Format]) IS NOT NULL OR NULLIF([Target].[Format], [Source].[Format]) IS NOT NULL OR 
	NULLIF([Source].[Quantity], [Target].[Quantity]) IS NOT NULL OR NULLIF([Target].[Quantity], [Source].[Quantity]) IS NOT NULL OR 
	NULLIF([Source].[LibraryId], [Target].[LibraryId]) IS NOT NULL OR NULLIF([Target].[LibraryId], [Source].[LibraryId]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[Title] = [Source].[Title], 
  [Target].[Format] = [Source].[Format], 
  [Target].[Quantity] = [Source].[Quantity], 
  [Target].[LibraryId] = [Source].[LibraryId]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Title],[Format],[Quantity],[LibraryId])
 VALUES([Source].[Id],[Source].[Title],[Source].[Format],[Source].[Quantity],[Source].[LibraryId])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [MovieRecord]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[MovieRecord] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO



SET IDENTITY_INSERT [MovieRecord] OFF
SET NOCOUNT OFF
GO

