
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [VideogameConsole] ON

MERGE INTO [VideogameConsole] AS [Target]
USING (VALUES
  (1,N'PC')
 ,(2,N'PS4')
 ,(3,N'Xbox One')
 ,(4,N'PS5')
 ,(5,N'PS3')
 ,(6,N'Xbox 360')
 ,(7,N'Xbox Series X')
 ,(8,N'SNES')
 ,(9,N'Sega Gensis')
) AS [Source] ([Id],[ConsoleName])
ON ([Target].[Id] = [Source].[Id])
WHEN MATCHED AND (
	NULLIF([Source].[ConsoleName], [Target].[ConsoleName]) IS NOT NULL OR NULLIF([Target].[ConsoleName], [Source].[ConsoleName]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[ConsoleName] = [Source].[ConsoleName]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[ConsoleName])
 VALUES([Source].[Id],[Source].[ConsoleName])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [VideogameConsole]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[VideogameConsole] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO



SET IDENTITY_INSERT [VideogameConsole] OFF
SET NOCOUNT OFF
GO



--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [VideogameRecord] ON

MERGE INTO [VideogameRecord] AS [Target]
USING (VALUES
  (1,N'Doom',N'PC',3,1,1)
 ,(2,N'Oblivion',N'PC',3,1,1)
 ,(4,N'Rust',N'PC',1,1,1)
 ,(6,N'Overcooked',N'PC',1,1,1)
 ,(7,N'Skyrim',N'PC',2,1,1)
 ,(9,N'Fortnite',N'PS4',1,1,2)
) AS [Source] ([Id],[Title],[Console],[Quantity],[LibraryId],[VideogameConsoleId])
ON ([Target].[Id] = [Source].[Id])
WHEN MATCHED AND (
	NULLIF([Source].[Title], [Target].[Title]) IS NOT NULL OR NULLIF([Target].[Title], [Source].[Title]) IS NOT NULL OR 
	NULLIF([Source].[Console], [Target].[Console]) IS NOT NULL OR NULLIF([Target].[Console], [Source].[Console]) IS NOT NULL OR 
	NULLIF([Source].[Quantity], [Target].[Quantity]) IS NOT NULL OR NULLIF([Target].[Quantity], [Source].[Quantity]) IS NOT NULL OR 
	NULLIF([Source].[LibraryId], [Target].[LibraryId]) IS NOT NULL OR NULLIF([Target].[LibraryId], [Source].[LibraryId]) IS NOT NULL OR 
	NULLIF([Source].[VideogameConsoleId], [Target].[VideogameConsoleId]) IS NOT NULL OR NULLIF([Target].[VideogameConsoleId], [Source].[VideogameConsoleId]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[Title] = [Source].[Title], 
  [Target].[Console] = [Source].[Console], 
  [Target].[Quantity] = [Source].[Quantity], 
  [Target].[LibraryId] = [Source].[LibraryId], 
  [Target].[VideogameConsoleId] = [Source].[VideogameConsoleId]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([Id],[Title],[Console],[Quantity],[LibraryId],[VideogameConsoleId])
 VALUES([Source].[Id],[Source].[Title],[Source].[Console],[Source].[Quantity],[Source].[LibraryId],[Source].[VideogameConsoleId])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE;

DECLARE @mergeError int
 , @mergeCount int
SELECT @mergeError = @@ERROR, @mergeCount = @@ROWCOUNT
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [VideogameRecord]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[VideogameRecord] rows affected by MERGE: ' + CAST(@mergeCount AS VARCHAR(100));
 END
GO



SET IDENTITY_INSERT [VideogameRecord] OFF
SET NOCOUNT OFF
GO

